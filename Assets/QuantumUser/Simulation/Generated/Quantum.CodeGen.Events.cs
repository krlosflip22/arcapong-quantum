// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  public unsafe partial class Frame {
    public unsafe partial struct FrameEvents {
      static partial void GetEventTypeCountCodeGen(ref Int32 eventCount) {
        eventCount = 8;
      }
      static partial void GetParentEventIDCodeGen(Int32 eventID, ref Int32 parentEventID) {
        switch (eventID) {
          default: break;
        }
      }
      static partial void GetEventTypeCodeGen(Int32 eventID, ref System.Type result) {
        switch (eventID) {
          case EventOnGameStateChanged.ID: result = typeof(EventOnGameStateChanged); return;
          case EventOnScoreChanged.ID: result = typeof(EventOnScoreChanged); return;
          case EventOnLocalPlayerSpawned.ID: result = typeof(EventOnLocalPlayerSpawned); return;
          case EventOnAIPlayerSpawned.ID: result = typeof(EventOnAIPlayerSpawned); return;
          case EventOnGameTerminated.ID: result = typeof(EventOnGameTerminated); return;
          case EventOnPowerUpActivated.ID: result = typeof(EventOnPowerUpActivated); return;
          case EventOnPowerUpDeactivated.ID: result = typeof(EventOnPowerUpDeactivated); return;
          default: break;
        }
      }
      public EventOnGameStateChanged OnGameStateChanged(GameState state) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnGameStateChanged>(EventOnGameStateChanged.ID);
        ev.state = state;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnScoreChanged OnScoreChanged(Int32 playerIndex, Int32 score) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnScoreChanged>(EventOnScoreChanged.ID);
        ev.playerIndex = playerIndex;
        ev.score = score;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLocalPlayerSpawned OnLocalPlayerSpawned(Int32 playerIndex) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnLocalPlayerSpawned>(EventOnLocalPlayerSpawned.ID);
        ev.playerIndex = playerIndex;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnAIPlayerSpawned OnAIPlayerSpawned(Int32 playerIndex) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnAIPlayerSpawned>(EventOnAIPlayerSpawned.ID);
        ev.playerIndex = playerIndex;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnGameTerminated OnGameTerminated() {
        var ev = _f.Context.AcquireEvent<EventOnGameTerminated>(EventOnGameTerminated.ID);
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPowerUpActivated OnPowerUpActivated(Int32 index, Int32 blockIndex, PowerUpType type) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPowerUpActivated>(EventOnPowerUpActivated.ID);
        ev.index = index;
        ev.blockIndex = blockIndex;
        ev.type = type;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPowerUpDeactivated OnPowerUpDeactivated(Int32 index, Int32 blockIndex, PowerUpType type) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPowerUpDeactivated>(EventOnPowerUpDeactivated.ID);
        ev.index = index;
        ev.blockIndex = blockIndex;
        ev.type = type;
        _f.AddEvent(ev);
        return ev;
      }
    }
  }
  public unsafe partial class EventOnGameStateChanged : EventBase {
    public new const Int32 ID = 1;
    public GameState state;
    protected EventOnGameStateChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnGameStateChanged() : 
        base(1, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 41;
        hash = hash * 31 + state.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnScoreChanged : EventBase {
    public new const Int32 ID = 2;
    public Int32 playerIndex;
    public Int32 score;
    protected EventOnScoreChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnScoreChanged() : 
        base(2, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 43;
        hash = hash * 31 + playerIndex.GetHashCode();
        hash = hash * 31 + score.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLocalPlayerSpawned : EventBase {
    public new const Int32 ID = 3;
    public Int32 playerIndex;
    protected EventOnLocalPlayerSpawned(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLocalPlayerSpawned() : 
        base(3, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 47;
        hash = hash * 31 + playerIndex.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnAIPlayerSpawned : EventBase {
    public new const Int32 ID = 4;
    public Int32 playerIndex;
    protected EventOnAIPlayerSpawned(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnAIPlayerSpawned() : 
        base(4, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 53;
        hash = hash * 31 + playerIndex.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnGameTerminated : EventBase {
    public new const Int32 ID = 5;
    protected EventOnGameTerminated(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnGameTerminated() : 
        base(5, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 59;
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPowerUpActivated : EventBase {
    public new const Int32 ID = 6;
    public Int32 index;
    public Int32 blockIndex;
    public PowerUpType type;
    protected EventOnPowerUpActivated(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPowerUpActivated() : 
        base(6, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 61;
        hash = hash * 31 + index.GetHashCode();
        hash = hash * 31 + blockIndex.GetHashCode();
        hash = hash * 31 + type.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPowerUpDeactivated : EventBase {
    public new const Int32 ID = 7;
    public Int32 index;
    public Int32 blockIndex;
    public PowerUpType type;
    protected EventOnPowerUpDeactivated(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPowerUpDeactivated() : 
        base(7, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 67;
        hash = hash * 31 + index.GetHashCode();
        hash = hash * 31 + blockIndex.GetHashCode();
        hash = hash * 31 + type.GetHashCode();
        return hash;
      }
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
